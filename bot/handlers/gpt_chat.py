from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from openai import AsyncOpenAI
from bot.config import OPENAI_API_KEY
from bot.states.gpt_state import GPTDialog
from datetime import datetime
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

memory_storage = {}  # user_id: [messages]

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤–∏–∑–∞–º
with open("bot/data/visa_combined_prompt.txt", encoding="utf-8") as f:
    SYSTEM_PROMPT = f.read()

@router.callback_query(F.data == "chat")
async def start_chat(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.")
    await state.set_state(GPTDialog.chatting)
    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

@router.message(GPTDialog.chatting)
async def handle_chat_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_text = message.text.strip()
    memory = memory_storage.setdefault(user_id, [])

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω
    if not memory or memory[0].get("role") != "system":
        memory.insert(0, {"role": "system", "content": SYSTEM_PROMPT})

        # –î–æ–±–∞–≤–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ –∫–ª–∏–º–∞—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        memory.append({
            "role": "user",
            "content": (
                f"–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}.–ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ –±–ª–∏–∂–µ, —á–µ–º —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π, –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∫–ª–∏–º–∞—Ç, —Å–µ–∑–æ–Ω –∏ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."
            )
        })

    memory.append({"role": "user", "content": user_text})
    await message.chat.do("typing")

    log_message(user_id, f"[USER] {user_text}")

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –¥–ª–∏–Ω–µ
    MAX_HISTORY_MESSAGES = 30
    if len(memory) > MAX_HISTORY_MESSAGES:
        system = memory[0] if memory[0]["role"] == "system" else None
        memory = [system] + memory[-(MAX_HISTORY_MESSAGES - 1):] if system else memory[-MAX_HISTORY_MESSAGES:]
        memory_storage[user_id] = memory

    try:
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=memory,
            temperature=0.5,
        )
        answer = response.choices[0].message.content.strip()
        memory.append({"role": "assistant", "content": answer})

        menu_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_tours")]
        ])
        cleaned_answer = answer.replace("**", "")
        await message.answer(cleaned_answer, reply_markup=menu_markup)
        log_message(user_id, f"[BOT] {answer}")

    except Exception as e:
        error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
        await message.answer(error_text)
        print(f"[ERROR] OpenAI API failed: {e}")
        log_message(user_id, f"[ERROR] {str(e)}")


# üîπ –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_message(user_id, text):
    os.makedirs("dialog_logs", exist_ok=True)
    log_file = f"dialog_logs/{user_id}.log"
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {text}\n")
