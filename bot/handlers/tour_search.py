
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.states.tour_state import TourSearchState
from bot.services.tour_api import search_tours_to_file
from bot.keyboards.main import main_keyboard, main_menu_button
import re
from datetime import datetime, date
from bot.keyboards.main import country_keyboard, country_keyboard_for_Moskov
from bot.constants.countries import COUNTRIES
from bot.keyboards.price_keyboard import price_keyboard
from bot.keyboards.city_keyboard import generate_city_keyboard
from bot.keyboards.hotel_category_keyboard import hotel_category_keyboard
from bot.keyboards.hotel_category_keyboard import HOTEL_CATEGORIES
from bot.utils.tour_utils import build_tour_params
from bot.keyboards.departure_city_keyboard import departure_city_keyboard


router = Router()
user_tour_results = {}

@router.callback_query(F.data == "tours")
async def ask_departure_city(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("üõ´ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=departure_city_keyboard())
    await state.set_state(TourSearchState.departure_city)



@router.callback_query(F.data.startswith("country_"))
async def handle_country_selection(call: CallbackQuery, state: FSMContext):
    country_name = call.data.replace("country_", "")
    country_id = COUNTRIES[country_name]["id"]
    await state.update_data(countryId=country_id, countryName=country_name)
    # await call.message.edit_text(f"‚úÖ –°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞: {country_name}")
    try:
        await call.message.delete()
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    msg = await call.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=main_menu_button())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(TourSearchState.date)
    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

@router.callback_query(F.data.startswith("dep_"))
async def handle_departure_city(call: CallbackQuery, state: FSMContext):
    city_id = int(call.data.replace("dep_", ""))
    city_name = {
        448: "–ú–∏–Ω—Å–∫",
        1: "–ú–æ—Å–∫–≤–∞",
    }.get(city_id, "–ì–æ—Ä–æ–¥")

    await state.update_data(departCityId=city_id, departCityName=city_name)

    try:
        await call.message.delete()
    except:
        pass

    # üëá –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if city_id == 1:  # –ú–æ—Å–∫–≤–∞
        keyboard = country_keyboard_for_Moskov()
    else:  # –ú–∏–Ω—Å–∫ –∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        keyboard = country_keyboard()

    await call.message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await call.message.answer("‚ÑπÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_button())
    await state.set_state(TourSearchState.country)

    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")



@router.message(TourSearchState.date)
async def ask_nights_range(message: Message, state: FSMContext):
    text = message.text.strip()
    match = re.match(r"(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})", text)
    if not match:
        try:
            await message.delete()
            data = await state.get_data()
            if "prompt_id" in data:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        msg = await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 22.06.2025 - 22.08.2025", reply_markup=main_menu_button())
        await state.update_data(prompt_id=msg.message_id)
        return

    date_from_str, date_to_str = match.groups()

    try:
        date_from = datetime.strptime(date_from_str, "%d.%m.%Y").date()
        date_to = datetime.strptime(date_to_str, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=main_menu_button())
        return

    # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
    if date_from < date.today():
        try:
            await message.delete()
            data = await state.get_data()
            if "prompt_id" in data:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        msg = await message.answer("‚ùó –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã.", reply_markup=main_menu_button())
        await state.update_data(prompt_id=msg.message_id)
        return

    await state.update_data(dateFrom=date_from_str, dateTo=date_to_str)

    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

    # await message.answer(f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{date_from_str}</b> ‚Äì <b>{date_to_str}</b>")
    msg = await message.answer("üè® –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ—á–µ–π  (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7-12):", reply_markup=main_menu_button())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(TourSearchState.nights)

@router.message(TourSearchState.nights)
async def ask_adults(message: Message, state: FSMContext):
    text = message.text.strip()
    match = re.match(r"(\d+)-(\d+)", text)
    if not match:
        try:
            await message.delete()
            data = await state.get_data()
            if "prompt_id" in data:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        msg = await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 7-12", reply_markup=main_menu_button())
        await state.update_data(prompt_id=msg.message_id)
        return

    nights_min, nights_max = map(int, match.groups())
    await state.update_data(nightsMin=nights_min, nightsMax=nights_max)
    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(message.chat.id, data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

    # await message.answer(f"üåô –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{nights_min}‚Äì{nights_max}</b> –Ω–æ—á–µ–π")
    msg = await message.answer("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:", reply_markup=main_menu_button())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(TourSearchState.people)

@router.message(TourSearchState.people)
async def ask_kids(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        adults = int(text)
        await state.update_data(adults=adults)
    except ValueError:
        try:
            await message.delete()
            data = await state.get_data()
            if "prompt_id" in data:
                await message.bot.delete_message(message.chat.id, data["prompt_id"])
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        msg = await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=main_menu_button())
        await state.update_data(prompt_id=msg.message_id)
        return

    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(message.chat.id, data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

    # await message.answer(f"üë• –í–∑—Ä–æ—Å–ª—ã—Ö: <b>{adults}</b>")
    msg = await message.answer("üßí –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (0, –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=main_menu_button())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(TourSearchState.kids)

@router.message(TourSearchState.kids)
async def ask_price(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        kids = int(text)
        await state.update_data(kids=kids)
    except ValueError:
        try:
            await message.delete()
            data = await state.get_data()
            if "prompt_id" in data:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        msg = await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=main_menu_button())
        await state.update_data(prompt_id=msg.message_id)
        return

    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

    # await message.answer(f"üßí –î–µ—Ç–µ–π: <b>{kids}</b>")
    msg = await message.answer("üíµ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:", reply_markup=price_keyboard())
    await message.answer("‚ÑπÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_button())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(TourSearchState.priceMax)


@router.callback_query(F.data.startswith("price_"))
async def handle_price_selection(call: CallbackQuery, state: FSMContext):
    price_text = call.data.replace("price_", "")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ
    ranges = {
        "2000": (1600, 2300),
        "2500": (2300, 2800),
        "3000": (2800, 3300),
        "3500": (3300, 3800),
        "4000": (3800, 999999),
    }

    if price_text not in ranges:
        await call.message.answer("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.", reply_markup=main_menu_button())
        return

    price_min, price_max = ranges[price_text]
    await state.update_data(priceMin=price_min, priceMax=price_max)

    data = await state.get_data()

    summary = (
        f"‚åõ –ú—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n"
        f"–ü—Ä–∏ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã‚ù£Ô∏è\n\n"
        f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data.get('countryName', '‚Äî')}\n"
        f"üí• –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departCityName', '‚Äî')}\n"
        f"üìÖ –î–∞—Ç—ã: {data.get('dateFrom')} ‚Äì {data.get('dateTo')}\n"
        f"üåô –ù–æ—á–∏: {data.get('nightsMin')}‚Äì{data.get('nightsMax')}\n"
        f"üë• –í–∑—Ä–æ—Å–ª—ã—Ö: {data.get('adults')}, –î–µ—Ç–µ–π: {data.get('kids')}\n"
        f"üíµ –ë—é–¥–∂–µ—Ç: {price_min}‚Äì{price_max} USD\n\n"
        f"‚åõ –ò—â–µ–º —Ç—É—Ä—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    await call.message.edit_text(summary)

    params = build_tour_params(data)

    tours = await search_tours_to_file(params, output_file="all_tours.json")

    for tour in tours:
        tour["departCityName"] = data.get("departCityName", "‚Äî")

    if not tours:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_tours")]
        ])
        await call.message.edit_text(
            "üôÅ –¢—É—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä.",
            reply_markup=markup
        )
        await call.message.answer("‚ÑπÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_button())
        await state.clear()
        return

    user_tour_results[call.from_user.id] = {"tours": tours, "index": 0}
    await state.set_state(TourSearchState.show_results)
    await send_tour_info(call.message, tours[0], 0, len(tours))

    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")




async def send_tour_info(message: Message, tour: dict, index: int, total: int):

    text = (
        f"üèñ <b>–¢—É—Ä {index + 1} –∏–∑ {total}</b>\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {tour.get('countryName', '‚Äî')}\n"
        f"üí•–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {tour.get('departCityName', '‚Äî')}\n"
        f"üè® <b>–û—Ç–µ–ª—å:</b> {tour.get('hotelName', '‚Äî')}\n"
        f"üèô <b>–ì–æ—Ä–æ–¥:</b> {tour.get('resortName', '‚Äî')}\n"
        f"üìÖ <b>–î–∞—Ç—ã:</b> {tour.get('tourDate', '‚Äî')} ‚Üí {tour.get('tourEndDate', '‚Äî')}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {tour.get('hotelUrl') or tour.get('tourUrl', '‚Äî')}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {tour.get('price', '‚Äî')} USD *\n"
        f"* –¶–µ–Ω—ã –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è. –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
            InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="next")
        ],
        [InlineKeyboardButton(text="üõé –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="add_params")],
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="exit_tours")]
    ])

    await message.answer(text, reply_markup=markup)

@router.callback_query(F.data.in_(["next", "prev"]))
async def navigate_tours(call: CallbackQuery):
    user_id = call.from_user.id
    results = user_tour_results.get(user_id)
    if not results:
        try:
            await call.answer("–ù–µ—Ç —Ç—É—Ä–æ–≤")
        except Exception as e:
            print(f"[ERROR] call.answer() failed: {e}")
        return

    index = results["index"]
    index = (index + 1) % len(results["tours"]) if call.data == "next" else (index - 1) % len(results["tours"])
    results["index"] = index

    try:
        await call.message.delete()
    except Exception as e:
        print(f"[ERROR] message.delete() failed: {e}")

    await send_tour_info(call.message, results["tours"][index], index, len(results["tours"]))

    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")


@router.callback_query(F.data == "exit_tours")
async def exit_tours_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_tour_results.pop(call.from_user.id, None)
    await call.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")

@router.callback_query(F.data == "add_params")
async def add_optional_filters(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country_id = data.get("countryId")

    await call.message.edit_text(
        "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=generate_city_keyboard(country_id)
    )
    await state.set_state(TourSearchState.resort)

@router.callback_query(F.data.startswith("resort_"))
async def handle_resort_selection(call: CallbackQuery, state: FSMContext):
    resort_id = call.data.replace("resort_", "")
    if resort_id != "skip":
        await state.update_data(resorts=resort_id)
    else:
        await state.update_data(resorts=None)

    data = await state.get_data()

    if resort_id != "skip":
        resort_name = next(
            (
                btn.text
                for row in generate_city_keyboard(data["countryId"]).inline_keyboard
                for btn in row
                if f"resort_{resort_id}" in btn.callback_data
            ),
            "–ì–æ—Ä–æ–¥"
        )
        await state.update_data(resorts=resort_id, resortName=resort_name)
    else:
        await state.update_data(resorts=None, resortName=None)

    try:
        await call.message.delete()
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª—è
    await call.message.answer("üè® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–µ–ª—è:", reply_markup=hotel_category_keyboard())
    await call.message.answer("‚ÑπÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_button())
    await state.set_state(TourSearchState.hotel_category)

@router.callback_query(F.data.startswith("hotelcat_"))
async def handle_hotel_category(call: CallbackQuery, state: FSMContext):
    cat_id = call.data.replace("hotelcat_", "")
    if cat_id != "skip":
        await state.update_data(hotelCategories=cat_id)
        category_name = next(
            (c["name"] for c in HOTEL_CATEGORIES if str(c["id"]) == cat_id),
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )
        await state.update_data(hotelCategories=cat_id, hotelCategoryName=category_name)
    else:
        await state.update_data(hotelCategories=None, hotelCategoryName=None)

    try:
        await call.message.delete()
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –∑–≤–µ–∑–¥–∞–º–∏: {e}")

    data = await state.get_data()
    summary = (
    f"‚åõ –ú—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n –ü—Ä–∏ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç‚ù£Ô∏è\n"
    f"‚úÖ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
    f"üåç –°—Ç—Ä–∞–Ω–∞: {data.get('countryName', '‚Äî')}\n"
    f"üí•–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departCityName', '‚Äî')}\n"
    f"üìÖ –î–∞—Ç—ã: {data.get('dateFrom')} ‚Äì {data.get('dateTo')}\n"
    f"üåô –ù–æ—á–∏: {data.get('nightsMin')}‚Äì{data.get('nightsMax')}\n"
    f"üë• –í–∑—Ä–æ—Å–ª—ã—Ö: {data.get('adults')}, –î–µ—Ç–µ–π: {data.get('kids')}\n"
    f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('resortName', '‚Äî')}\n"
    f"üí´ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è: {data.get('hotelCategoryName', '‚Äî')}\n"
    f"üíµ –ë—é–¥–∂–µ—Ç: {data.get('priceMax', '‚Äî')} USD\n\n"
    f"‚åõ –ò—â–µ–º —Ç—É—Ä—ã –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º..."
    )

    await call.message.answer(summary)  

    params = build_tour_params(data) # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

    print("üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", params)

    tours = await search_tours_to_file(params, output_file="all_tours.json")

    for tour in tours:
        tour["departCityName"] = data.get("departCityName", "‚Äî")

    if not tours:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_tours")]
        ])
        await call.message.edit_text("üôÅ –¢—É—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä.", reply_markup=markup)
        await call.message.answer("‚ÑπÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_button())
        await state.clear()
        return

    user_tour_results[call.from_user.id] = {"tours": tours, "index": 0}
    await state.set_state(TourSearchState.show_results)
    await send_tour_info(call.message, tours[0], 0, len(tours))
    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] call.answer() failed: {e}")