from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.services.uon_crm import create_lead
from bot.config import GROUP_CHAT_ID
from bot.handlers.tour_search import user_tour_results
from bot.keyboards.main import share_contact_keyboard
import re
from bot.keyboards.main import main_keyboard

router = Router()

class BookingState(StatesGroup):
    waiting_name = State()
    waiting_phone = State()
    waiting_username = State()

@router.callback_query(F.data == "book")
async def start_booking(call: CallbackQuery, state: FSMContext):
    await state.set_state(BookingState.waiting_name)
    msg = await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.update_data(prompt_id=msg.message_id)
    try:
        await call.answer()
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@router.message(BookingState.waiting_name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(message.chat.id, data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await message.answer(f"‚úÖ –í—ã –≤–≤–µ–ª–∏ –∏–º—è: {name}")
    msg = await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=share_contact_keyboard)
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(BookingState.waiting_phone)

@router.message(BookingState.waiting_phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)
    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(message.chat.id, data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await message.answer(f"‚úÖ –í—ã –≤–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_number}")
    msg = await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username (–±–µ–∑ @):", reply_markup=ReplyKeyboardRemove())
    await state.update_data(prompt_id=msg.message_id)
    await state.set_state(BookingState.waiting_username)

@router.message(BookingState.waiting_username)
async def get_username(message: Message, state: FSMContext):
    username = message.text.strip()
    if not re.match(r"^\w{3,32}$", username):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –í–≤–µ–¥–∏—Ç–µ –±–µ–∑ @, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return
    await state.update_data(username=message.text)
    try:
        await message.delete()
        data = await state.get_data()
        if "prompt_id" in data:
            await message.bot.delete_message(message.chat.id, data["prompt_id"])
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await message.answer(f"‚úÖ –í—ã –≤–≤–µ–ª–∏ username: @{username}")
    data = await state.get_data()
    user_id = message.from_user.id
    tours = user_tour_results.get(user_id, {}).get("tours", [])
    tour_info = tours[0] if tours else {}

    comment = (
        f"–ó–∞—è–≤–∫–∞ —Å Telegram:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üîó Username: @{data['username']}\n"
        f"üè® –û—Ç–µ–ª—å: {tour_info.get('hotelName', '‚Äî')}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {tour_info.get('countryName', '‚Äî')}\n"
        f"üí•–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {tour_info.get('departCityName', '‚Äî')}\n"
        f"üìÖ –î–∞—Ç—ã —Ç—É—Ä–∞: {tour_info.get('tourDate', '‚Äî')} ‚Üí {tour_info.get('tourEndDate', '‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {tour_info.get('price', '‚Äî')} USD\n"
        f"üîó –°—Å—ã–ª–∫–∞: {tour_info.get('tourUrl', '‚Äî')}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ CRM —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É
    await create_lead(
        name=data["name"],
        phone=data["phone"],
        comment=comment,
        bot=message.bot  # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ –æ–± –æ—à–∏–±–∫–µ
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram
    group_text = (
        f"{comment}"
    )
    await message.bot.send_message(chat_id=GROUP_CHAT_ID, text=group_text)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=main_keyboard())
    await state.clear()

