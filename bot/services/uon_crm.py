import aiohttp
import asyncio
from bot.config import UON_TOKEN, UON_BASE_URL, GROUP_CHAT_ID
from aiogram import Bot

async def create_lead(name: str, phone: str, comment: str = "", bot: Bot = None, retries: int = 2):
    url = f"{UON_BASE_URL}{UON_TOKEN}/request/create.json"
    payload = {
        "u_name": name,
        "u_phone": phone,
        "source": "Telegram-–±–æ—Ç",
        "source_id": 1,
        "manager_id": 3,
    }

    timeout = aiohttp.ClientTimeout(
        total=30,
        connect=10,
        sock_read=10,
        sock_connect=10
    )

    for attempt in range(1, retries + 2):  # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ + retries
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, data=payload, ssl=False) as response:
                    text = await response.text()
                    print("üì§ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ U-ON:", payload)
                    print("üì• –û—Ç–≤–µ—Ç –æ—Ç U-ON:", text)
                    if response.status == 200:
                        return {"success": True, "response": text}
                    else:
                        raise Exception(f"–°—Ç–∞—Ç—É—Å {response.status}, —Ç–µ–ª–æ: {text}")
        except (asyncio.TimeoutError, aiohttp.ClientError, Exception) as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ U-ON –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}:\n{e}"

            # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(error_text)

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—Å—Ç—å bot
            if bot:
                await bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=(
                        "üö® <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ CRM</b>\n"
                        f"üë§ <b>–ò–º—è:</b> {name}\n"
                        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{comment}\n\n"
                        f"<b>–û—à–∏–±–∫–∞:</b>\n<code>{str(e)}</code>"
                    ),
                    parse_mode="HTML"
                )

            if attempt >= retries + 1:
                return {"error": str(e)}
            await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
